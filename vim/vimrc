" utf-8
scriptencoding utf-8
set encoding=utf-8


" basic
execute pathogen#infect()
filetype plugin indent on
syntax enable
set number

set runtimepath^=~/.vim/bundle/ctrlp.vim

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'file:///home/gmarik/path/to/plugin'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

call vundle#end()            " required

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)

call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-easy-align'
Plug 'https://github.com/junegunn/vim-github-dashboard.git'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'fatih/vim-go', { 'tag': '*' }
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug '~/my-prototype-plugin'
Plug 'KeitaNakamura/neodark.vim'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'mattn/emmet-vim'

call plug#end()


set nocompatible                " choose no compatibility with legacy vi

syntax enable
set showcmd                     " display incomplete commands

" Scrolling with mouse
set mouse=nicr
set mouse=a

" ************ CtrlP (File Finder) ****************
" - Pressing <control + p> starts it.
" - <ctrl + j/k> moves between matches.
" - Enter opens. <ctrl + t> opens in same tab (with config below).
" - ctrl+f changes modes. MRU means 'Most Recently Used'. 
" - <ctrl + r> toggles regexp/fuzzy search; regexp is also nice for exact filenames
"
" Open a single file in a new tab by default
let g:ctrlp_prompt_mappings = {'AcceptSelection("e")': ['<c-t>'], 'AcceptSelection("t")': ['<cr>', '2-LeftMouse'], }
" Open new files in a new tab
let g:ctrlp_open_new_file = 't'
" Open multiple files in new tabs and jump to the first one
let g:ctrlp_open_multiple_files = 'tj'
" Ignore files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

" ************ NERDTree ****************
" autocmd vimenter * NERDTree      " Auto Open NERDTree
"" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>    
" imap <esc>           <esc>:w<CR>

" ************ NERDCommenter ****************

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1


let mapleader=","               " use comma as <Leader> key instead of backslash
let g:user_emmet_leader_key='<C-y>'
" Map keys to switch between buffers without C-W then C-(direction j,k,l,h)
nnoremap <leader><leader> <c-^> 
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode


"" Splitting
set splitbelow                  " new horizontal split set below
set splitright                  " new vertical split to the right

"" Line Numbers

set numberwidth=5               " gutter width for numbers

" Enable copying to clipboard using `CTRL + c`

map <C-c> y:e ~/clipsongzboard<CR>P:w !pbcopy<CR><CR>:bdelete!<CR>


" Set syntax highlighting for specific file types
autocmd BufRead,BufNewFile Appraisals set filetype=ruby
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
augroup END

" Set markdown files to 80 characters
au BufRead,BufNewFile *.md setlocal textwidth=80

" ****************** COLORS *********************  
" set background=dark
" colorscheme jellybeans
let g:neodark#terminal_transparent = 1 " default: 0
colorscheme neodark
" colorscheme railscasts
let g:lightline = {}
let g:lightline.colorscheme = 'neodark'

" Airline shown all the time
set laststatus=2

set noswapfile
" Put swapfiles in a central place instead of the current directory.
" Vim will use the first directory that exists.
set directory=~/.vim_swap,~/tmp,/var/tmp,$HOME/Local\ Settings/Temp 

" Same thing for backup files (see `:help backup`)
set backupdir=~/.vim_backup,~/tmp,/var/tmp,$HOME/Local\ Settings/Temp 

" ****************** SCROLLING *********************  
set scrolloff=8      " Number of lines from vertical edge to start scrolling
set sidescrolloff=15 " Number of cols from horizontal edge to start scrolling
set sidescroll=1     " Number of cols to scroll at a time

" ****************** SPLITTING *********************  
set splitright " vsplit makes new pane to the right (not left)
set splitbelow " split  makes new pane below (not above)

" ****************** SEARCHING *********************  
set incsearch     " do incremental searching
set ignorecase    " do case-insensitive searches
set smartcase     " ... unless the search contains upper-case characters
set hlsearch      " highlight all matched terms
" Pressing return clears highlighted search
:nnoremap <CR> :nohlsearch<CR>/<BS>
" Pressing control + return also clears (for use in NERDTree)
:nnoremap <c-CR> :nohlsearch<CR>/<BS>

" ***************** TABS ***************************  
" Usually, you want 2 spaces per tab, so these lines make this the default.
" There are ways to make vi do clever things with tabs in different
" situations, like MS Word can, but I *always* want tab to behave the same way
" -- so I set all three of these tab-related values the same.
" (To overrride these per file type, put commands in .vim/ftplugin/)
set tabstop=4
set shiftwidth=4
set noexpandtab
" set tabstop=2
set softtabstop=2
" set shiftwidth=2
" set expandtab " insert spaces instead of tab characters
set smarttab  " backspace over a tab will remove a tab's worth of space

" *********** DISPLAYING HIDDEN CHARACTERS *********
" Beautify display of hidden characters (tabs, line breaks, etc).
" (`:set list!` to toggle display; `:help listchars` for info )
" set listchars=nbsp:☠,trail:⋅,tab:▸\ ,eol:¬,extends:❯,precedes:❮
set listchars=trail:⋅,tab:▸\ ,eol:¬,extends:❯,precedes:❮


" From Nathan's section of the gvim
set textwidth=78

"** When indenting in visual mode, return to visual mode **
" indent with > or tab
vmap > >gv
vmap <tab> >gv
" outdent with < or shift-tab
vmap < <gv
vmap <S-Tab> <gv
" Shift-tab in insert mode is a backspace (unindent)
imap <S-Tab> <BS>

" Control+h produces a hashrocket
imap <C-h> <Space>=><Space>

" Move lines up and down
nmap <C-J> :m +1 <CR>
nmap <C-K> :m -2 <CR>

" Duplicate a selection
" Visual mode: D
vmap D y'>p

" Visually select the text that was last edited/pasted with 'gV'
" (This is based on the standard 'gv', which repeats the last selection)
nnoremap <expr> gV '`[' . strpart(getregtype(), 0, 1) . '`]'

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_java_javac_config_file_enabled=1

let g:vim_markdown_folding_disabled=1

let g:jsx_ext_required = 0 " Allow JSX in normal JS files

if !has('gui_running')
  set t_Co=256
endif
